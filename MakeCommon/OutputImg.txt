
ifeq "$(OPTION_LOADED)" ""
include $(MAKE_COMMON_DIR)/MakeOption.txt
endif
include $(MAKE_COMMON_DIR)/MakeCommon.txt

#----------------------------------------------------------------------
# include the libraries
#----------------------------------------------------------------------
APP_BASE_DIR_D = $(APP_BASE_DIR)/Debug
APPEX_BASE_DIR_D = $(APPEX_BASE_DIR)/Debug
LIB_BASE_DIR_D = $(LIB_BASE_DIR)/Debug
LIBEX_BASE_DIR_D = $(LIBEX_BASE_DIR)/Debug

APP_BASE_DIR_R = $(APP_BASE_DIR)/Release
APPEX_BASE_DIR_R = $(APPEX_BASE_DIR)/Release
LIB_BASE_DIR_R = $(LIB_BASE_DIR)/Release
LIBEX_BASE_DIR_R = $(LIBEX_BASE_DIR)/Release

# get slide-effect libraries except default effect
LIB_SLIDE_ALL_D		:= $(wildcard $(LIB_BASE_DIR_D)/SlideEffect*.a)
LIB_SLIDE_DEFAULT_D	:= $(filter %SlideEffect_Default_D.a, $(LIB_SLIDE_ALL_D))
LIB_SLIDE_D		:= $(filter-out $(LIB_SLIDE_DEFAULT_D), $(LIB_SLIDE_ALL_D))

LIB_SLIDE_ALL_R		:= $(wildcard $(LIB_BASE_DIR_R)/SlideEffect*.a)
LIB_SLIDE_DEFAULT_R	:= $(filter %SlideEffect_Default.a, $(LIB_SLIDE_ALL_R))
LIB_SLIDE_R		:= $(filter-out $(LIB_SLIDE_DEFAULT_R), $(LIB_SLIDE_ALL_R))

# get format-parsing libraries
LIB_PARSER_ALL_D		:= $(wildcard $(LIB_BASE_DIR_D)/PARSER*.a)
LIB_PARSER_DEFAULT_D	:= $(filter %PARSER_Default_D.a, $(LIB_PARSER_ALL_D))
LIB_PARSER_D		:= $(filter-out $(LIB_PARSER_DEFAULT_D), $(LIB_PARSER_ALL_D))

LIB_PARSER_ALL_R		:= $(wildcard $(LIB_BASE_DIR_R)/PARSER*.a)
LIB_PARSER_DEFAULT_R	:= $(filter %PARSER_Default.a, $(LIB_PARSER_ALL_R))
LIB_PARSER_R		:= $(filter-out $(LIB_PARSER_DEFAULT_R), $(LIB_PARSER_ALL_R))

# get AAC libraries
LIB_AAC_ALL_D	    := $(wildcard $(LIB_BASE_DIR_D)/AAC*.a)
LIB_AAC_FAKE_D	    := $(filter %AAC_Fake_D.a, $(LIB_AAC_ALL_D))
LIB_AAC_D		    := $(filter-out $(LIB_AAC_FAKE_D), $(LIB_AAC_ALL_D))

LIB_AAC_ALL_R	    := $(wildcard $(LIB_AAC_DIR_R)/AAC*.a)
LIB_AAC_FAKE_R	    := $(filter %AAC_Fake.a, $(LIB_AAC_ALL_R))
LIB_AAC_R		    := $(filter-out $(LIB_AAC_Fake_R), $(LIB_AAC_ALL_R))

# get FD LIB in LIB module
LIB_FD_ALL_D	:= $(wildcard $(LIB_BASE_DIR_D)/FD*.a)
LIB_FD_D	:= $(wildcard $(LIB_BASE_DIR_D)/$(FD)_D.a)

LIB_FD_ALL_R	:= $(wildcard $(LIB_BASE_DIR_R)/FD*.a)
LIB_FD_R	:= $(wildcard $(LIB_BASE_DIR_R)/$(FD).a)

# get SD LIB in LIB module
LIB_SD_ALL_D	:= $(wildcard $(LIB_BASE_DIR_D)/SD*.a)
LIB_SD_D	:= $(wildcard $(LIB_BASE_DIR_D)/$(SD)_D.a)

LIB_SD_ALL_R	:= $(wildcard $(LIB_BASE_DIR_R)/SD*.a)
LIB_SD_R	:= $(wildcard $(LIB_BASE_DIR_R)/$(SD).a)

# get LIBs in Application (except capture library), AppExt
# and LIB module (except driver and slide-effect libraries)
LIB_APP_D	:= $(wildcard $(APP_BASE_DIR_D)/*.a)
LIB_APPEX_D	:= $(wildcard $(APPEX_BASE_DIR_D)/*.a)
LIB_LIB_D	:= $(filter-out $(LIB_FD_ALL_D) $(LIB_SD_ALL_D) $(LIB_AAC_ALL_D) $(LIB_PARSER_ALL_D) $(LIB_SLIDE_ALL_D), $(wildcard $(LIB_BASE_DIR_D)/*.a))

LIB_APP_R	:= $(wildcard $(APP_BASE_DIR_R)/*.a)
LIB_APPEX_R	:= $(wildcard $(APPEX_BASE_DIR_R)/*.a)
LIB_LIB_R	:= $(filter-out $(LIB_FD_ALL_R) $(LIB_SD_ALL_R) $(LIB_AAC_ALL_R) $(LIB_PARSER_ALL_R) $(LIB_SLIDE_ALL_R), $(wildcard $(LIB_BASE_DIR_R)/*.a))

# get LIBs in LIBExt module
LIB_AUDIO_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/$(AUDIO)_D.a)
ifneq "$(AUDIOEXT)" "NONE"
LIB_AUDIOEXT_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/$(AUDIOEXT)_D.a)
endif

LIB_GSENSOR_D	:= $(wildcard $(LIBEX_BASE_DIR_R)/GSENSOR_D.a)
LIB_LCD_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/$(LCD)_D.a)
LIB_NTSC_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/LCDTV_TVNTSC_D.a)
LIB_PAL_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/LCDTV_TVPAL_D.a)
LIB_HDMI_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/LCDTV_TVHDMI_D.a)
LIB_LCDC_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/LCDTV_COMMON_D.a)
LIB_SENSOR_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/$(SENSOR)_D.a)
LIB_LENS_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/Lens_D.a)
LIB_IRRX_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/$(IRRX)_D.a)
LIB_PSTORE_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/$(PSTORE)_D.a)
LIB_MSDCEXT_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/$(MSDCVENDOR)_D.a)
LIB_AF_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/AF_D.a)
LIB_CAF_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/CAF_D.a)
LIB_GPS_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/GPS_D.a)
LIB_VSDIO_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/VirtualSdio_D.a)

ifneq "$(TouchPanel)" "DISABLE"
LIB_TOUCHPANEL_D   := $(wildcard $(LIBEX_BASE_DIR_D)/$(TouchPanel)_D.a)
LIB_GESTURE_D   := $(wildcard $(LIBEX_BASE_DIR_D)/Gesture_D.a)
endif
LIB_ENDE_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/$(ENDE)_D.a)
LIB_ENDELIB_D	:= $(wildcard $(LIBEX_BASE_DIR_D)/lounny001_D.a)


LIB_AUDIO_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/$(AUDIO).a)
ifneq "$(AUDIOEXT)" "NONE"
LIB_AUDIOEXT_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/$(AUDIOEXT).a)
endif

LIB_GSENSOR_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/GSENSOR.a)
LIB_LCD_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/$(LCD).a)
LIB_NTSC_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/LCDTV_TVNTSC.a)
LIB_PAL_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/LCDTV_TVPAL.a)
LIB_HDMI_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/LCDTV_TVHDMI.a)
LIB_LCDC_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/LCDTV_COMMON.a)
LIB_SENSOR_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/$(SENSOR).a)
LIB_LENS_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/Lens.a)
LIB_IRRX_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/$(IRRX).a)
LIB_PSTORE_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/$(PSTORE).a)
LIB_MSDCEXT_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/$(MSDCVENDOR).a)
LIB_AF_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/AF.a)
LIB_CAF_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/CAF.a)
LIB_GPS_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/GPS.a)
LIB_VSDIO_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/VirtualSdio.a)

ifneq "$(TouchPanel)" "DISABLE"
LIB_TOUCHPANEL_R   := $(wildcard $(LIBEX_BASE_DIR_R)/$(TouchPanel).a)
LIB_GESTURE_R   := $(wildcard $(LIBEX_BASE_DIR_R)/Gesture.a)
endif

LIB_ENDE_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/$(ENDE).a)
LIB_ENDELIB_R	:= $(wildcard $(LIBEX_BASE_DIR_R)/lounny001.a)

# get total libraries for Debug & Release mode; note we cannot get string of LIB_R from LIB_D, or vice versa,
# because we may build Debug and Release output separately, the library of one mode maybe not exist, and cause
# the link problem. So, while adding/deleting libraries, please be patient to do it for Debug and Release mode both.

LIB_R := \
	$(LIB_APP_R) \
	$(LIB_APPEX_R) \
	$(LIB_LIB_R) \
	$(LIB_SLIDE_R) \
	$(LIB_SLIDE_DEFAULT_R) \
	$(LIB_PARSER_R) \
	$(LIB_PARSER_DEFAULT_R) \
	$(LIB_AAC_R) \
	$(LIB_AAC_FAKE_R) \
	$(LIB_AUDIO_R) \
	$(LIB_AUDIOEXT_R) \
	$(LIB_LCD_R) \
	$(LIB_NTSC_R) \
	$(LIB_PAL_R) \
	$(LIB_LCDC_R) \
	$(LIB_SENSOR_R) \
	$(LIB_GSENSOR_R) \
	$(LIB_GPS_R) \
	$(LIB_LENS_R) \
	$(LIB_IRRX_R) \
	$(LIB_HDMI_R) \
	$(LIB_PSTORE_R) \
	$(LIB_MSDCEXT_R) \
	$(LIB_AF_R) \
	$(LIB_FD_R) \
	$(LIB_VSDIO_R) \
	$(LIB_SD_R) \
	$(LIB_CAF_R) \
	$(LIB_ENDE_R) \
	$(LIB_ENDELIB_R) \
	$(LIB_GESTURE_R) \
	$(LIB_TOUCHPANEL_R)

LIB_D := \
	$(LIB_APP_D) \
	$(LIB_APPEX_D) \
	$(LIB_LIB_D) \
	$(LIB_SLIDE_D) \
	$(LIB_SLIDE_DEFAULT_D) \
	$(LIB_PARSER_D) \
	$(LIB_PARSER_DEFAULT_D) \
	$(LIB_AAC_D) \
	$(LIB_AAC_FAKE_D) \
	$(LIB_AUDIO_D) \
	$(LIB_AUDIOEXT_D) \
	$(LIB_LCD_D) \
	$(LIB_NTSC_D) \
	$(LIB_PAL_D) \
	$(LIB_LCDC_D) \
	$(LIB_SENSOR_D) \
	$(LIB_GSENSOR_D) \
	$(LIB_GPS_D) \
	$(LIB_LENS_D) \
	$(LIB_IRRX_D) \
	$(LIB_PSTORE_D) \
	$(LIB_HDMI_D) \
	$(LIB_MSDCEXT_D) \
	$(LIB_AF_D) \
	$(LIB_FD_D) \
	$(LIB_VSDIO_D) \
	$(LIB_SD_D) \
	$(LIB_CAF_D) \
	$(LIB_ENDE_D) \
	$(LIB_ENDELIB_D) \
	$(LIB_GESTURE_D) \
	$(LIB_TOUCHPANEL_D) \
	$(LIB_R)

#----------------------------------------------------------------------
# set the make outputs
#----------------------------------------------------------------------
# for debug mode
IMAGE_D = $(IMG_DEBUG)/$(PRJ_NAME)_D.axf
BIN_D = $(IMG_DEBUG)/$(BIN_NAME).bin
MAP_D = $(IMG_DEBUG)/$(PRJ_NAME)_D.txt

# for release mode
IMAGE_R = $(IMG_RELEASE)/$(PRJ_NAME).axf
BIN_R = $(IMG_RELEASE)/$(BIN_NAME).bin
MAP_R = $(IMG_RELEASE)/$(PRJ_NAME).txt

#----------------------------------------------------------------------
# set the warning/error log file option
#----------------------------------------------------------------------
log_file = log_Prj.txt

ifeq "$(LOG_ERR)" "ON"
LOG_OPTION = 2>>$(log_file)
endif

#----------------------------------------------------------------------
# set robustness checking log file
#----------------------------------------------------------------------
chk_file = chk_Prj.txt

#----------------------------------------------------------------------
# set the make targets
#----------------------------------------------------------------------
build_D: make_debug_begin prepare_log $(IMAGE_D) $(BIN_D)
build_R: make_release_begin prepare_log $(IMAGE_R) $(BIN_R)

ifeq "$(ISOLATE_DEP)" "ON"
build_DEP: make_dep_begin $(SRC) $(ASM) $(ALL_DEP)
endif

build_CHK: make_chk_begin $(CHECK_FILE)

prepare_log:
	@-rm -f $(FORCED_REBUILD_OBJ)
	@$(LOG_OPTION)

$(IMAGE_D): $(SRC) $(ASM) $(ALL_OBJ_D) $(LIB_D)
	@-echo Linking ... \
	&& echo Creating image $@ ... \
	&& echo $(ALL_OBJ_D) > ALL_OBJ_D.txt
	@$(LD) -keep clk_chang* -o $@ -via ALL_OBJ_D.txt $(LIB_D) -info totals -map -scatter $(SCATTER) -list $(MAP_D) $(LOG_OPTION) \
	&& rm -f ALL_OBJ_D.txt

$(BIN_D): $(IMAGE_D)
ifeq "$(MULTI_REGIONS)" "ON"
	@echo Creating executable $@ ... \
	&& $(FE) -output $(IMG_DEBUG) -bin $< \
	&& mv $(IMG_DEBUG)/SPECIAL_RO $(BIN_D)
else
	@echo Creating executable $@ ... \
	&& $(FE) -output $@ -bin $<
endif

#----------------------------------------------------------------------
# AXF to disassmebly code
# Command Line:> make AXF_DIS="ON" release
#----------------------------------------------------------------------
ifeq "$(AXF_DIS)" "ON"
	@echo Translate AXF $< to disassembly... \
	&& $(FE) -c -s -o $(IMG_DEBUG)/outfile.lst $<
endif

	@echo Encrypt binary file $@ ... \
	&& $(EBIN) $(EBIN_METHOD) $(BIN_D) $(EBIN_BADDR) $(EBIN_MNAME) $(EBIN_PSTR)

ifeq "$(FW_COMPRESS)" "ON"
ifeq "$(FW_PARTIAL_COMPRESS)" "ON"
	@$(BFC) c lz $(BIN_D) tmp 1 0x74 \
	&& cp -f tmp $(BIN_D) \
	&& rm -f tmp
else
	@$(BFC) c lz $(BIN_D) tmp 0 0 \
	&& cp -f tmp $(BIN_D) \
	&& rm -f tmp
endif
endif

ifeq "$(COPY_BIN_2_STG)" "ON"
ifneq "$(NVT_STG_PATH)" ""
	@-echo Copy \""$(BIN_D)\"" to $(NVT_STG_PATH) ... \
	&& cp -f $(BIN_D) $(NVT_STG_PATH)$(notdir $(BIN_D))
endif
endif
	@cp $(BIN_D) $(IMG_DEBUG)/$(BIN_NAME_T).bin

$(IMAGE_R): $(SRC) $(ASM) $(ALL_OBJ_R) $(LIB_R)
	@echo Linking ... \
	&& echo Creating image $@ ... \
	&& echo $(ALL_OBJ_R) > ALL_OBJ_R.txt
	@$(LD) -keep clk_chang* -o $@ -via ALL_OBJ_R.txt $(LIB_R) -info totals -map -scatter $(SCATTER) -list $(MAP_R) $(LOG_OPTION) \
	&& rm -f ALL_OBJ_R.txt

$(BIN_R): $(IMAGE_R)
ifeq "$(MULTI_REGIONS)" "ON"
	@echo Creating executable $@ ... \
	&& $(FE) -output $(IMG_RELEASE) -bin $< \
	&& mv $(IMG_RELEASE)/SPECIAL_RO $(BIN_R)
else
	@echo Creating executable $@ ... \
	&& $(FE) -output $@ -bin $<
endif
#----------------------------------------------------------------------
# AXF to disassmebly code
# Command Line:> make AXF_DIS="ON" release
#----------------------------------------------------------------------
ifeq "$(AXF_DIS)" "ON"
	@echo Translate AXF $< to disassembly... \
	&& $(FE) -c -s -o $(IMG_RELEASE)/outfile.lst $<
endif
	@echo Encrypt binary file $@ ... \
	&& $(EBIN) $(EBIN_METHOD) $(BIN_R) $(EBIN_BADDR) $(EBIN_MNAME) $(EBIN_PSTR)
#----------------------------------------------------------------------
# FW compression
# NAND_BLK_SIZE define in MakeConfig.txt
#----------------------------------------------------------------------
ifeq "$(FW_COMPRESS)" "ON"
ifeq "$(FW_PARTIAL_COMPRESS)" "ON"
	@$(BFC) c lz $(BIN_R) tmp 1 0x74 $(NAND_BLK_SIZE)\
	&& cp -f tmp $(BIN_R) \
	&& rm -f tmp
else
	@$(BFC) c lz $(BIN_R) tmp 0 0 \
	&& cp -f tmp $(BIN_R) \
	&& rm -f tmp
endif
endif

ifeq "$(COPY_BIN_2_STG)" "ON"
ifneq "$(NVT_STG_PATH)" ""
	@-echo Copy \""$(BIN_R)\"" to $(NVT_STG_PATH) ... \
	&& cp -f $(BIN_R) $(NVT_STG_PATH)$(notdir $(BIN_R))
endif
endif
	@cp $(BIN_R) $(IMG_RELEASE)/$(BIN_NAME_T).bin

.PHONY:
rm_log:
ifeq "$(CLEAN_LOG)" "ON"
	@-rm -f $(log_file)
endif

clean:
	@-echo Clean $(basename $(notdir $(IMAGE_R))) ... \
	&& rm -rf $(IMG_BASE_DIR) $(log_file) $(chk_file)

ifeq "$(ISOLATE_DEP)" "ON"
all: rm_log
	@make dep
	@make debug
	@make release

rebuild:
	@make clean
	@make dep
	@make debug
	@make release

dep: build_DEP
else
rebuild: clean build_D build_R
endif

debug: rm_log build_D

release: rm_log build_R

rm_chk_log:
	@-rm -f $(chk_file)

chk: rm_chk_log build_CHK

chkclean:
	@-echo Clean $(basename $(notdir $(IMAGE_R))) checking data ... \
	&& rm -rf $(CHECK_DIR) $(chk_file)
